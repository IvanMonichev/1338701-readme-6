// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  VIDEO
  TEXT
  QUOTE
  LINK
  PHOTO
}

enum PostStatus {
  PUBLISHED
  DRAFT
}

model PostVideo {
  id         String @id @default(uuid())
  urlYoutube String @map("url_youtube")
  Post       Post?

  @@map("posts_video")
}

model PostLink {
  id          String  @id @default(uuid())
  url         String
  description String?
  Post        Post?

  @@map("posts_link")
}

model PostQuote {
  id           String @id @default(uuid())
  quoteContent String @map("quote_content")
  Post         Post?

  @@map("posts_quote")
}

model PostPhoto {
  id      String @id @default(uuid())
  photoId String @map("photo_id")
  Post    Post?

  @@map("posts_photo")
}

model PostText {
  id           String @id @default(uuid())
  announcement String
  content      String
  Post         Post?

  @@map("posts_text")
}

model Post {
  id               String     @id @default(uuid())
  type             PostType
  title            String
  status           PostStatus @default(PUBLISHED)
  tags             Tag[]
  authorId         String     @map("author_id")
  originalAuthorId String?    @map("original_author_id")
  originalPostId   String?    @map("original_post_id")
  isRepost         Boolean    @default(false) @map("is_repost")
  repostedBy       String[]   @map("reposted_by")
  likes            String[]
  comments         Comment[]
  likesCount       Int        @default(0)
  commentsCount    Int        @default(0)
  postVideo        PostVideo? @relation(fields: [postVideoId], references: [id])
  postVideoId      String?    @unique @map("post_video_id")
  postLink         PostLink?  @relation(fields: [postLinkId], references: [id])
  postLinkId       String?    @unique @map("post_link_id")
  postQuote        PostQuote? @relation(fields: [postQuoteId], references: [id])
  postQuoteId      String?    @unique @map("post_quote_id")
  postPhoto        PostPhoto? @relation(fields: [postPhotoId], references: [id])
  postPhotoId      String?    @unique @map("post_photo_id")
  postText         PostText?  @relation(fields: [postTextId], references: [id])
  postTextId       String?    @unique @map("post_text_id")
  createdAt        DateTime   @default(now()) @map("created_at")
  publishedAt      DateTime   @default(now()) @map("published_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  @@index([title], name: "idx_post_title")
  @@map("posts")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  posts     Post[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String   @map("author_id")
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}
