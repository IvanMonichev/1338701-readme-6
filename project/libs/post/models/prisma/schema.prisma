// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  VIDEO
  TEXT
  QUOTE
  LINK
  PHOTO
}

model Post {
  id        String     @id @default(uuid())
  type      PostType
  title     String
  tag       Tag[]
  authorId  String     @map("author_id")
  likes     String[]
  comments  Comment[]
  postVideo PostVideo?
  postLink  PostLink?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("posts")
}

model PostVideo {
  id         String @id @default(uuid())
  urlYoutube String @map("url_youtube")
  postId     String @unique @map("post_id")
  post       Post   @relation(fields: [postId], references: [id])

  @@map("posts_video")
}

model PostLink {
  id          String @id @default(uuid())
  url         String
  description String
  postId      String @unique @map("post_id")
  post        Post   @relation(fields: [postId], references: [id])

  @@map("posts_link")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  posts     Post[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String   @map("author_id")
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}
